diff --git a/node_modules/react-native-circular-progress-indicator/lib/typescript/types/index.d.ts b/node_modules/react-native-circular-progress-indicator/lib/typescript/types/index.d.ts
index 13c6869..a9828c2 100644
--- a/node_modules/react-native-circular-progress-indicator/lib/typescript/types/index.d.ts
+++ b/node_modules/react-native-circular-progress-indicator/lib/typescript/types/index.d.ts
@@ -211,7 +211,9 @@ interface CircularProgressProps extends BaseCircularProgressProps {
      * @default null
      */
     titleColor?: string;
+    imageProps?:any;
     /**
+     * @default null
      * title text font size. Use this to change the font size
      * of the title text. If not provided, the font size from title
      * style  or a value calculated from the circle radius will be used.
diff --git a/node_modules/react-native-circular-progress-indicator/src/circularProgress/index.tsx b/node_modules/react-native-circular-progress-indicator/src/circularProgress/index.tsx
index 68654d7..b944c4e 100644
--- a/node_modules/react-native-circular-progress-indicator/src/circularProgress/index.tsx
+++ b/node_modules/react-native-circular-progress-indicator/src/circularProgress/index.tsx
@@ -1,17 +1,20 @@
 import React, { forwardRef, useImperativeHandle, useMemo } from 'react';
-import { Text, StyleSheet, View } from 'react-native';
+import { Text, StyleSheet, View,Image } from 'react-native';
 
 import ProgressCircle from '../components/progressCircle';
 import useAnimatedValue from '../hooks/useAnimatedValue';
 import COLORS from '../utils/colors';
 import type { CircularProgressProps, ProgressRef } from '../types';
 import ProgressValue from '../components/progressValue';
-
+import {
+  Steps
+} from "../../../../src/components/icons";
 import styles from './styles';
 
 const CircularProgress = forwardRef<ProgressRef, CircularProgressProps>(
   (props, ref) => {
     const {
+      imageProps,
       value,
       initialValue = 0,
       circleBackgroundColor = COLORS.TRANSPARENT,
@@ -140,8 +143,10 @@ const CircularProgress = forwardRef<ProgressRef, CircularProgressProps>(
             StyleSheet.absoluteFillObject,
             styles(styleProps).valueContainer,
           ]}>
+           {imageProps && imageProps}
           {showProgressValue && (
             <View style={styles(styleProps).valueContainerRow}>
+             
               {!!valuePrefix && (
                 <Text
                   testID="progress-bar-value-prefix"
diff --git a/node_modules/react-native-circular-progress-indicator/src/components/progressCircle/styles.ts b/node_modules/react-native-circular-progress-indicator/src/components/progressCircle/styles.ts
index 3834cd7..4c70c84 100644
--- a/node_modules/react-native-circular-progress-indicator/src/components/progressCircle/styles.ts
+++ b/node_modules/react-native-circular-progress-indicator/src/components/progressCircle/styles.ts
@@ -1,7 +1,8 @@
 import { StyleSheet } from 'react-native';
 
 const styles = StyleSheet.create({
-  svg: { transform: [{ rotateZ: '270deg' }] },
+  svg: { transform: [{ rotateZ: '270deg' }]},
+  
 });
 
 export default styles;
diff --git a/node_modules/react-native-circular-progress-indicator/src/hooks/useAnimatedValue.ts b/node_modules/react-native-circular-progress-indicator/src/hooks/useAnimatedValue.ts
index 8b56ffb..3b23ac9 100644
--- a/node_modules/react-native-circular-progress-indicator/src/hooks/useAnimatedValue.ts
+++ b/node_modules/react-native-circular-progress-indicator/src/hooks/useAnimatedValue.ts
@@ -1,3 +1,190 @@
+// import { useCallback, useEffect, useMemo } from 'react';
+// import {
+//   createAnimatedPropAdapter,
+//   Easing,
+//   interpolateColor,
+//   processColor,
+//   runOnJS,
+//   useAnimatedProps,
+//   useDerivedValue,
+//   useSharedValue,
+//   withDelay,
+//   withTiming,
+// } from 'react-native-reanimated';
+// import { withPause } from 'react-native-redash';
+
+// import type { StrokeColorConfigType } from '../types';
+
+// import useCircleValues from './useCircleValues';
+
+// export interface UseAnimatedValueProps {
+//   value: number;
+//   initialValue?: number;
+//   radius?: number;
+//   duration?: number;
+//   delay?: number;
+//   maxValue?: number;
+//   onAnimationComplete?: () => void;
+//   activeStrokeWidth?: number;
+//   inActiveStrokeWidth?: number;
+//   clockwise?: boolean;
+//   startInPausedState?: boolean;
+//   valueSuffix?: string;
+//   valuePrefix?: string;
+//   // eslint-disable-next-line no-unused-vars
+//   progressFormatter?: (v: number) => number | string;
+//   strokeColorConfig?: StrokeColorConfigType[];
+// }
+
+// type Config = {
+//   strokeDashoffset: number;
+//   stroke?: string | number;
+// };
+
+// export default function useAnimatedValue({
+//   initialValue = 0,
+//   radius = 60,
+//   maxValue = 100,
+//   clockwise,
+//   startInPausedState,
+//   delay = 0,
+//   value,
+//   duration,
+//   onAnimationComplete = () => null,
+//   activeStrokeWidth = 10,
+//   inActiveStrokeWidth = 10,
+//   progressFormatter = (v: number) => {
+//     'worklet';
+
+//     return Math.round(v);
+//   },
+//   strokeColorConfig = undefined,
+// }: UseAnimatedValueProps) {
+//   const paused = useSharedValue(<boolean>startInPausedState);
+//   const animatedValue = useSharedValue(initialValue);
+//   const { circleCircumference } = useCircleValues({
+//     radius,
+//     activeStrokeWidth,
+//     inActiveStrokeWidth,
+//   });
+
+//   const pause = useCallback(() => {
+//     paused.value = true;
+//   }, [paused]);
+
+//   const play = useCallback(() => {
+//     paused.value = false;
+//   }, [paused]);
+
+//   const resetAnimatedValue = useCallback(() => {
+//     // reset the paused state to false regardless of the value of
+//     // startInPausedState, as calling reAnimate is expected to restart
+//     // the animation.
+//     paused.value = false;
+//     animatedValue.value = initialValue;
+//   }, [animatedValue, initialValue, paused]);
+
+//   const animateValue = useCallback(() => {
+//     animatedValue.value = withPause(
+//       withDelay(
+//         delay,
+//         withTiming(value, { duration, easing: Easing.linear }, isFinished => {
+//           if (isFinished) {
+//             runOnJS(onAnimationComplete)?.();
+//           }
+//         })
+//       ),
+//       paused
+//     );
+//     // eslint-disable-next-line react-hooks/exhaustive-deps
+//   }, [animatedValue, delay, duration, paused, value]);
+
+//   const reAnimate = () => {
+//     resetAnimatedValue();
+//     animateValue();
+//   };
+
+//   const sortedStrokeColors = useMemo(() => {
+//     if (!strokeColorConfig) {
+//       return null;
+//     }
+//     return strokeColorConfig.sort((a, b) => a.value - b.value);
+//   }, [strokeColorConfig]);
+
+//   const colors = useMemo(() => {
+//     if (!sortedStrokeColors) {
+//       return null;
+//     }
+//     return sortedStrokeColors.map(item => item.color);
+//   }, [sortedStrokeColors]);
+
+//   const values = useMemo(() => {
+//     if (!sortedStrokeColors) {
+//       return null;
+//     }
+//     return sortedStrokeColors.map(item => item.value);
+//   }, [sortedStrokeColors]);
+
+//   const animatedCircleProps = useAnimatedProps(
+//     () => {
+//       let biggestValue: number = Math.max(initialValue, maxValue);
+//       biggestValue = biggestValue <= 0 ? 1 : biggestValue;
+//       const maxPercentage: number = clockwise
+//         ? (100 * animatedValue.value) / biggestValue
+//         : (100 * -animatedValue.value) / biggestValue;
+//       const config: Config = {
+//         strokeDashoffset:
+//           circleCircumference - (circleCircumference * maxPercentage) / 100,
+//       };
+//       const strokeColor =
+//         colors && values
+//           ? interpolateColor(animatedValue.value, values, colors)
+//           : undefined;
+//       if (strokeColor) {
+//         config.stroke = strokeColor;
+//       }
+//       return config;
+//     },
+//     [],
+//     createAnimatedPropAdapter(
+//       props => {
+//         if (Object.keys(props).includes('stroke')) {
+//           // eslint-disable-next-line @typescript-eslint/ban-ts-comment
+//           // @ts-ignore
+//           props.stroke = { type: 0, payload: processColor(props.stroke) };
+//         }
+//       },
+//       ['stroke']
+//     )
+//   );
+
+//   useEffect(() => {
+//     animateValue();
+//   }, [animateValue]);
+
+//   const progressValue = useDerivedValue(() => {
+//     return `${progressFormatter(animatedValue.value)}`;
+//   });
+
+//   const animatedTextProps = useAnimatedProps(() => {
+//     return {
+//       text: progressValue.value,
+//       // eslint-disable-next-line @typescript-eslint/no-explicit-any
+//     } as any;
+//   });
+
+//   return {
+//     animatedCircleProps,
+//     animatedTextProps,
+//     progressValue,
+//     pause,
+//     play,
+//     reAnimate,
+//   };
+// }
+
+
+
 import { useCallback, useEffect, useMemo } from 'react';
 import {
   createAnimatedPropAdapter,
@@ -8,7 +195,6 @@ import {
   useAnimatedProps,
   useDerivedValue,
   useSharedValue,
-  withDelay,
   withTiming,
 } from 'react-native-reanimated';
 import { withPause } from 'react-native-redash';
@@ -29,9 +215,6 @@ export interface UseAnimatedValueProps {
   inActiveStrokeWidth?: number;
   clockwise?: boolean;
   startInPausedState?: boolean;
-  valueSuffix?: string;
-  valuePrefix?: string;
-  // eslint-disable-next-line no-unused-vars
   progressFormatter?: (v: number) => number | string;
   strokeColorConfig?: StrokeColorConfigType[];
 }
@@ -49,82 +232,52 @@ export default function useAnimatedValue({
   startInPausedState,
   delay = 0,
   value,
-  duration,
+  duration = 1000, // Default duration
   onAnimationComplete = () => null,
   activeStrokeWidth = 10,
   inActiveStrokeWidth = 10,
-  progressFormatter = (v: number) => {
-    'worklet';
-
-    return Math.round(v);
-  },
+  progressFormatter = (v: number) => Math.round(v),
   strokeColorConfig = undefined,
 }: UseAnimatedValueProps) {
-  const paused = useSharedValue(<boolean>startInPausedState);
-  const animatedValue = useSharedValue(initialValue);
+  // Keep track of paused state and the animated value
+  const paused = useSharedValue(!!startInPausedState);
+  const animatedValue = useSharedValue(initialValue); // Shared value for the progress
+  
   const { circleCircumference } = useCircleValues({
     radius,
     activeStrokeWidth,
     inActiveStrokeWidth,
   });
 
-  const pause = useCallback(() => {
-    paused.value = true;
-  }, [paused]);
-
-  const play = useCallback(() => {
-    paused.value = false;
-  }, [paused]);
-
-  const resetAnimatedValue = useCallback(() => {
-    // reset the paused state to false regardless of the value of
-    // startInPausedState, as calling reAnimate is expected to restart
-    // the animation.
-    paused.value = false;
-    animatedValue.value = initialValue;
-  }, [animatedValue, initialValue, paused]);
-
+  // Update the animation based on the value change
   const animateValue = useCallback(() => {
+    // Animate from the current value to the new value
     animatedValue.value = withPause(
-      withDelay(
-        delay,
-        withTiming(value, { duration, easing: Easing.linear }, isFinished => {
-          if (isFinished) {
-            runOnJS(onAnimationComplete)?.();
-          }
-        })
-      ),
+      withTiming(value, { duration, easing: Easing.linear }, (isFinished) => {
+        if (isFinished) {
+          runOnJS(onAnimationComplete)?.(); // Run callback when animation completes
+        }
+      }),
       paused
     );
-    // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, [animatedValue, delay, duration, paused, value]);
-
-  const reAnimate = () => {
-    resetAnimatedValue();
-    animateValue();
-  };
+  }, [animatedValue, value, paused, duration, onAnimationComplete]);
 
   const sortedStrokeColors = useMemo(() => {
-    if (!strokeColorConfig) {
-      return null;
-    }
+    if (!strokeColorConfig) return null;
     return strokeColorConfig.sort((a, b) => a.value - b.value);
   }, [strokeColorConfig]);
 
   const colors = useMemo(() => {
-    if (!sortedStrokeColors) {
-      return null;
-    }
+    if (!sortedStrokeColors) return null;
     return sortedStrokeColors.map(item => item.color);
   }, [sortedStrokeColors]);
 
   const values = useMemo(() => {
-    if (!sortedStrokeColors) {
-      return null;
-    }
+    if (!sortedStrokeColors) return null;
     return sortedStrokeColors.map(item => item.value);
   }, [sortedStrokeColors]);
 
+  // Animated props for the circle
   const animatedCircleProps = useAnimatedProps(
     () => {
       let biggestValue: number = Math.max(initialValue, maxValue);
@@ -132,22 +285,27 @@ export default function useAnimatedValue({
       const maxPercentage: number = clockwise
         ? (100 * animatedValue.value) / biggestValue
         : (100 * -animatedValue.value) / biggestValue;
+
       const config: Config = {
         strokeDashoffset:
           circleCircumference - (circleCircumference * maxPercentage) / 100,
       };
+
+      // Animate stroke color
       const strokeColor =
         colors && values
           ? interpolateColor(animatedValue.value, values, colors)
           : undefined;
+
       if (strokeColor) {
         config.stroke = strokeColor;
       }
+
       return config;
     },
     [],
     createAnimatedPropAdapter(
-      props => {
+      (props) => {
         if (Object.keys(props).includes('stroke')) {
           // eslint-disable-next-line @typescript-eslint/ban-ts-comment
           // @ts-ignore
@@ -158,6 +316,7 @@ export default function useAnimatedValue({
     )
   );
 
+  // Start animation whenever `value` changes
   useEffect(() => {
     animateValue();
   }, [animateValue]);
@@ -169,7 +328,6 @@ export default function useAnimatedValue({
   const animatedTextProps = useAnimatedProps(() => {
     return {
       text: progressValue.value,
-      // eslint-disable-next-line @typescript-eslint/no-explicit-any
     } as any;
   });
 
@@ -177,8 +335,12 @@ export default function useAnimatedValue({
     animatedCircleProps,
     animatedTextProps,
     progressValue,
-    pause,
-    play,
-    reAnimate,
+    pause: () => {
+      paused.value = true;
+    },
+    play: () => {
+      paused.value = false;
+    },
+    reAnimate: animateValue, // Trigger reanimation
   };
 }
diff --git a/node_modules/react-native-circular-progress-indicator/src/types/index.ts b/node_modules/react-native-circular-progress-indicator/src/types/index.ts
index 25985ed..ec0d1d3 100644
--- a/node_modules/react-native-circular-progress-indicator/src/types/index.ts
+++ b/node_modules/react-native-circular-progress-indicator/src/types/index.ts
@@ -213,6 +213,7 @@ interface CircularProgressProps extends BaseCircularProgressProps {
    * @default {}
    */
   titleStyle?: TextStyle;
+  imageProps?:any;
   /**
    * title text color. Use this to change the color of the
    * title text. If not provided, the active stroke color or
